class Cell {var n: int;}

class Counter0 {
  var x: int;
  
  method init() 
    requires acc(this.*);
    ensures acc(x);
  {
    x := 0;  
  }

  method inc()
    requires acc(x);
    ensures acc(x);
  {
    x := x + 1;
  } 

  method dec()
    requires acc(x);
    ensures acc(x);
  {    
    x := x - 1;  
  }

  method magic1() returns (c: Cell) 
    requires acc(x)
    ensures acc(c.n);
  {
    c := new Cell;
  }

  method magic2() returns (c: Cell)
    requires acc(x);
    ensures acc(x) && acc(c.n);
  {
    c := new Cell;
  }
}

class Counter1 {
  ghost var x: int;
  var y: int;
  var z: int;  
  // replaces x by acc(y) && acc(z) && x == y - z && y >= 0 && z >= 0;
  
  method init()
    requires acc(this.*);
    ensures acc(x) && acc(y) && acc(z) && x == y - z && y >= 0 && z >= 0;
  {
    x := 0;
    y := 0;
    z := 0;    
  }

  method inc()
    requires acc(x) && acc(y) && acc(z) && x == y - z && y >= 0 && z >= 0;
    ensures acc(x) && acc(y) && acc(z) && x == y - z && y >= 0 && z >= 0;
  {
    x := x + 1;
    y := y + 1;
  }

  method dec() 
    requires acc(x) && acc(y) && acc(z) && x == y - z && y >= 0 && z >= 0;
    ensures acc(x) && acc(y) && acc(z) && x == y - z && y >= 0 && z >= 0;
  {
    x := x - 1;
    z := z + 1;
  }       
}

class Counter2 {
  ghost var x: int;
  ghost var y: int;
  ghost var z: int;
  var a: Cell;
  var b: Cell;
  // replace y || z by acc(a) && acc(b) && acc(a.n) && acc(b.n) && y == a.n && z == b.n;
  
  method init() 
    requires acc(this.*);
    ensures acc(x) && acc(y) && acc(z) && x == y - z && y >= 0 && z >= 0 && acc(a) && acc(b) && acc(a.n) && acc(b.n) && y == a.n && z == b.n;
  {
    x := 0;
    y := 0;
    z := 0;
    a := new Cell;
    b := new Cell;
    a.n := 0;
    b.n := 0;
  }

  method inc() 
    requires acc(x) && acc(y) && acc(z) && x == y - z && y >= 0 && z >= 0 && acc(a) && acc(b) && acc(a.n) && acc(b.n) && y == a.n && z == b.n;
    ensures acc(x) && acc(y) && acc(z) && x == y - z && y >= 0 && z >= 0 && acc(a) && acc(b) && acc(a.n) && acc(b.n) && y == a.n && z == b.n;
  {
    x := x + 1;
    y := y + 1;
    a.n := a.n + 1;
  }

  method dec()
    requires acc(x) && acc(y) && acc(z) && x == y - z && y >= 0 && z >= 0 && acc(a) && acc(b) && acc(a.n) && acc(b.n) && y == a.n && z == b.n;
    ensures acc(x) && acc(y) && acc(z) && x == y - z && y >= 0 && z >= 0 && acc(a) && acc(b) && acc(a.n) && acc(b.n) && y == a.n && z == b.n;
  {
    x := x - 1;
    z := z + 1;
    b.n := b.n + 1;
  }

  method magic1() returns (c: Cell)
    requires acc(x) && acc(y) && acc(z) && x == y - z && y >= 0 && z >= 0 && acc(a) && acc(b) && acc(a.n) && acc(b.n) && y == a.n && z == b.n;
    ensures acc(c.n);
  {
    c := a;
  }

  method magic2() returns (c: Cell)
    requires acc(x) && acc(y) && acc(z) && x == y - z && y >= 0 && z >= 0 && acc(a) && acc(b) && acc(a.n) && acc(b.n) && y == a.n && z == b.n;
    ensures acc(x) && acc(y) && acc(z) && x == y - z && y >= 0 && z >= 0 && acc(a) && acc(b) && acc(a.n) && acc(b.n) && y == a.n && z == b.n && acc(c.n);
  {
    c := a;
  }
}

  
